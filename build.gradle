apply plugin: 'com.moowork.node'

defaultTasks 'buildArtifacts'

// CONFIGURATION
buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/plugins-release" }
    maven { url "http://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
  }
}

ext {
  dockerAccountName = 'ritensebv'
  dockerRepositoryName = 'portaal-libraries'
  dockerNetworkName = 'ritense_nw'
  dockerHostname = '723485878263.dkr.ecr.eu-central-1.amazonaws.com'
  dockerRegion = 'eu-central-1'
}

if (version == 'unspecified') {
  ext.templateVersion = ''
  println 'build version not specified'
} else {
  ext.templateVersion = '-' + version
  println 'build version specified: [' + templateVersion + ']'
}

// CUSTOM TASKS
//
class WriteBuildInfoFile extends DefaultTask {
  String environment = null // 'development'
  String gitHash = null // 'gitHash'
  String filePath = null // 'build/resources/main/build.properties'

  @TaskAction
  def doWriteBuildInfoFile() {
    def buildPropertiesFile = new File(filePath)
    def parentFolder = buildPropertiesFile.getParentFile();

    if (!parentFolder.exists()) {
      parentFolder.mkdirs()
    }

    buildPropertiesFile << "commitId=${gitHash}\n"
    buildPropertiesFile << "environment=${environment}\n"
  }
}

// FUNCTIONS
//
// From https://gist.github.com/JonasGroeger/7620911
def getCheckedOutGitCommitHash() {
  def gitFolder = "$projectDir/.git/"
  def takeFromHash = 12
  /*
   * '.git/HEAD' contains either
   *	  in case of detached head: the currently checked out commit hash
   *	  otherwise: a reference to a file containing the current commit hash
   */
  try {
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1	 // ref: refs/heads/master

    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
  }
  catch (e) {
    println 'Error retrieving Git Commit hash'
    throw new Exception(e)
  }
}

static def removeDanglingImages() {
  def sout = new StringBuffer(), serr = new StringBuffer()
  def proc = 'docker images -a -f=dangling=true -q'.execute()
  proc.consumeProcessOutput(sout, serr)
  proc.waitForOrKill(1000)

  List danglingImagesList = sout.toString().split('\n')
  danglingImagesList.each {
    if (it != '') {
      println "Removing old image: '${it}'"
      "docker rmi -f ${it}".execute()
    }
  }
}

static def getDockerVersion() {
  def sout = new StringBuffer(), serr = new StringBuffer()
  def proc = "docker --version".execute()
  proc.consumeProcessOutput(sout, serr)
  proc.waitForOrKill(6000)

  def dockerVersionString = sout.toString().replaceAll("Docker version (.+),.*", "\$1").trim()

  return dockerVersionString
}

def ecrLogin() {
  println 'Logging in...'
  def sout = new StringBuffer(), serr = new StringBuffer()
  def dir = new File(".")
  def env = System.getenv().collect { k, v -> "$k=$v" }
  env << "AWS_ACCESS_KEY_ID=$iamAccessKeyId"
  env << "AWS_SECRET_ACCESS_KEY=$iamSecretAccessKey"
  def loginCommandString = "aws ecr get-login --region ${dockerRegion}  --no-include-email"

  def proc = loginCommandString.execute(env, dir)
  proc.consumeProcessOutput(sout, serr)
  proc.waitForOrKill(6000)

  List loginCommandList = sout.toString().split('\n')
  loginCommandList.each {
    if (it != '') {
      println "Processing response: '${it}'"
      def loginProc = it.execute()
      loginProc.waitForOrKill(6000)
    }
  }
}

def cleanTags() {
  "docker rmi -f ${dockerHostname}/${dockerRepositoryName}:${version}".execute()
  println "Removed docker images"
}

// TASKS
task makeBuildInfoFile(type: WriteBuildInfoFile) {
  gitHash = getCheckedOutGitCommitHash()
  filePath = 'build.properties'
}

task copyDockerfileToDeploymentContext(type: Copy) {
  from '.'
  into 'deployment'
  include 'Dockerfile'

  outputs.files file('deployment/Dockerfile')
}

task copyHttpdRewriteFileToDeploymentDir(type: Copy) {
  from 'conf'
  into 'deployment'

  include('rewrite-to-index.conf')
}

task copyDockerFiles(dependsOn: [copyHttpdRewriteFileToDeploymentDir, copyDockerfileToDeploymentContext]) {
}

task buildArtifacts(type: NpmTask, dependsOn: [makeBuildInfoFile, copyDockerFiles, npm_install]) {
  ext.resolvedEnv = (project.hasProperty('env')) ? env : 'test'
  def buildTask = "build"
  if (ext.resolvedEnv.equalsIgnoreCase("test")) {
    buildTask = "buildTest"
  } else if (ext.resolvedEnv.equalsIgnoreCase("production")) {
    buildTask = "buildProd"
  }
  println "Using buildtask : ${buildTask}"
  args = ['run', buildTask]
}

task runDockerBuild(type: Exec) {
  commandLine 'docker', 'build', '-t', "${dockerHostname}/${dockerRepositoryName}:${version}", '.'
}

task pushImage(type: Exec, dependsOn: [runDockerBuild]) {
  doFirst {
    ecrLogin()
  }

  commandLine 'docker', 'push', "${dockerHostname}/${dockerRepositoryName}:${version}"
}

task stopDockerLocal(type: Exec) {
  commandLine 'docker', 'rm', '-f', dockerRepositoryName
  ignoreExitValue = true
}

task deployToLocalhost(type: Exec, dependsOn: [buildArtifacts, runDockerBuild, stopDockerLocal]) {
  group = 'deployment'
  executable 'docker'

  args 'run', '-d', '-p', '80:80', '--name', "$dockerRepositoryName", "--net=${dockerNetworkName}"

  // map local project folders to docker container
  String sourceProjectVolume = project.projectDir.absolutePath.charAt(0)
  String sourceProjectDirAsCygwinPath = "/${sourceProjectVolume.toLowerCase()}${project.projectDir.absolutePath.replace("${sourceProjectVolume}:", '')}".replace('\\', '/')

  args '-e', 'bpcHost=valtimo-engine.ritense_nw:8080'

  args "${dockerAccountName}/${dockerRepositoryName}:${version}"
}

// HELPER FUNCTIONS
task setupApachePortForwarding(type: Exec) {
  group = 'build setup'
  commandLine 'vboxmanage', 'modifyvm', '"default"', '--natpf1', '"apache,tcp,127.0.0.1,80,,80"'
}

